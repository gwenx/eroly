<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.eroly.mapper.StudentMapper" >
  <resultMap id="BaseResultMap" type="com.eroly.domain.Student" >
    <id column="student_id" property="studentId" jdbcType="INTEGER" />
    <result column="student_user" property="studentUser" jdbcType="INTEGER" />
    <result column="student_course" property="studentCourse" jdbcType="INTEGER" />
    <result column="student_datetime" property="studentDatetime" jdbcType="TIMESTAMP" />
    <result column="student_pay" property="studentPay" jdbcType="VARCHAR" />
    <result column="student_money" property="studentMoney" jdbcType="DOUBLE" />
    <result column="student_status" property="studentStatus" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    student_id, student_user, student_course, student_datetime, student_pay, student_money, 
    student_status
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from student
    where student_id = #{studentId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from student
    where student_id = #{studentId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.eroly.domain.Student" >
    insert into student (student_id, student_user, student_course, 
      student_datetime, student_pay, student_money, 
      student_status)
    values (#{studentId,jdbcType=INTEGER}, #{studentUser,jdbcType=INTEGER}, #{studentCourse,jdbcType=INTEGER}, 
      #{studentDatetime,jdbcType=TIMESTAMP}, #{studentPay,jdbcType=VARCHAR}, #{studentMoney,jdbcType=DOUBLE}, 
      #{studentStatus,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.eroly.domain.Student" >
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="studentId != null" >
        student_id,
      </if>
      <if test="studentUser != null" >
        student_user,
      </if>
      <if test="studentCourse != null" >
        student_course,
      </if>
      <if test="studentDatetime != null" >
        student_datetime,
      </if>
      <if test="studentPay != null" >
        student_pay,
      </if>
      <if test="studentMoney != null" >
        student_money,
      </if>
      <if test="studentStatus != null" >
        student_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="studentId != null" >
        #{studentId,jdbcType=INTEGER},
      </if>
      <if test="studentUser != null" >
        #{studentUser,jdbcType=INTEGER},
      </if>
      <if test="studentCourse != null" >
        #{studentCourse,jdbcType=INTEGER},
      </if>
      <if test="studentDatetime != null" >
        #{studentDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="studentPay != null" >
        #{studentPay,jdbcType=VARCHAR},
      </if>
      <if test="studentMoney != null" >
        #{studentMoney,jdbcType=DOUBLE},
      </if>
      <if test="studentStatus != null" >
        #{studentStatus,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.eroly.domain.Student" >
    update student
    <set >
      <if test="studentUser != null" >
        student_user = #{studentUser,jdbcType=INTEGER},
      </if>
      <if test="studentCourse != null" >
        student_course = #{studentCourse,jdbcType=INTEGER},
      </if>
      <if test="studentDatetime != null" >
        student_datetime = #{studentDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="studentPay != null" >
        student_pay = #{studentPay,jdbcType=VARCHAR},
      </if>
      <if test="studentMoney != null" >
        student_money = #{studentMoney,jdbcType=DOUBLE},
      </if>
      <if test="studentStatus != null" >
        student_status = #{studentStatus,jdbcType=VARCHAR},
      </if>
    </set>
    where student_id = #{studentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.eroly.domain.Student" >
    update student
    set student_user = #{studentUser,jdbcType=INTEGER},
      student_course = #{studentCourse,jdbcType=INTEGER},
      student_datetime = #{studentDatetime,jdbcType=TIMESTAMP},
      student_pay = #{studentPay,jdbcType=VARCHAR},
      student_money = #{studentMoney,jdbcType=DOUBLE},
      student_status = #{studentStatus,jdbcType=VARCHAR}
    where student_id = #{studentId,jdbcType=INTEGER}
  </update>
  <!-- 根据用户ID和课程ID，查询用户是否报过名过该课程 -->
  <select id="findSignUp" resultType="map" parameterType="map">
  	select student_id studentId,student_user studentUser,student_course studentCourse,student_datetime studentDatetime,
	student_pay studentPay,student_money studentMoney,student_status studentStatus
	from student
	WHERE student_user = #{userId} and student_course = #{courseId}
  </select>
  <!-- 根据用户ID查询用户报过名的课程 -->
  <select id="findSignByUser" resultType="map" parameterType="string">
  	select student_id studentId,student_user studentUser,course_name courseName,student_course studentCourse,teaching_start startTime,teaching_end endTime
	from student JOIN teaching ON student_course = teaching_course JOIN course ON course_id = student_course
	WHERE student_user =  #{userId}
  </select>
  <!-- 报名，插入报名信息 hasPay是否缴费（0未交费，1已交全款，2已交押金，4已交定金尾款）-->
  <insert id="insertSignInfo" parameterType="map">
  	insert INTO 
	student(student_user,student_course,student_datetime,student_pay,student_money,student_status)
	values(#{userId},#{courseId},sysdate(),#{hasPay},#{payMoney},#{studentStatus})
  </insert>
</mapper>